# Pricing a contract for difference contract (cfd)
def calculate_leveraged_cfd_price(current_price, contract_price, shares, leverage):
    """
    Calculate the price of a leveraged CFD contract.
    
    Parameters:
    current_price (float): The current price of the underlying asset.
    contract_price (float): The price of the asset at the time of the contract.
    shares (int): The number of shares in the contract.
    leverage (int): The leverage factor.

    Returns:
    float: The price of the leveraged CFD contract.
    """
    return (current_price - contract_price) * shares * leverage

# Example usage:
current_asset_price = 150.00  # Current price of the asset
contract_asset_price = 100.00  # Price of the asset at the time of the contract
number_of_shares = 10  # Number of shares in the contract
leverage_factor = 5  # Leverage of 5 times

leveraged_cfd_price = calculate_leveraged_cfd_price(current_asset_price, contract_asset_price, number_of_shares, leverage_factor)
print(f"The price of the leveraged CFD contract is: {leveraged_cfd_price}")

# Capital required to hold a single stock futures contracts 

import math

def calculate_ssf_price(spot_price, dividends, risk_free_rate, time_to_expiration, leverage):
    """
    Calculate the price of a single stock futures contract with leverage.
    
    Parameters:
    spot_price (float): The current price of the stock.
    dividends (float): The expected dividends during the period until expiration.
    risk_free_rate (float): The annualized risk-free interest rate.
    time_to_expiration (float): The time to expiration in years.
    leverage (int): The leverage factor.

    Returns:
    float: The price of the SSF contract.
    """
    ssf_price = (spot_price - dividends) * math.pow((1 + risk_free_rate), time_to_expiration)
    capital_required = ssf_price / leverage
    return capital_required

# Example usage:
spot_price = 100.00  # Current price of the stock
dividends = 2.00  # Expected dividends
risk_free_rate = 0.05  # Risk-free interest rate (5% per annum)
time_to_expiration = 0.5  # Time to expiration in years (6 months)
leverage = 5  # Leverage of 5 times

ssf_price = calculate_ssf_price(spot_price, dividends, risk_free_rate, time_to_expiration, leverage)
print(f"The capital required to hold the leveraged SSF position is: {ssf_price}")

# Pricing warrants contracts using black Scholes 

def price_warrants(spot_price, strike_price, time_to_expiration, risk_free_rate, volatility, dividends, dilution_factor, leverage):
    """
    Calculate the price of a warrant with time to expiration, dividends, dilution, and leverage.
    
    Parameters:
    spot_price (float): The current price of the stock.
    strike_price (float): The exercise price of the warrant.
    time_to_expiration (float): The time to expiration in years.
    risk_free_rate (float): The risk-free interest rate.
    volatility (float): The volatility of the stock.
    dividends (float): The expected dividends during the period until expiration.
    dilution_factor (float): The factor to account for share dilution.
    leverage (int): The leverage factor.

    Returns:
    float: The estimated price of the warrant.
    """
    # Black-Scholes Merton model adjusted for dividends and dilution
    from scipy.stats import norm
    import numpy as np

    # Adjust spot price for dividends and dilution
    adjusted_spot_price = spot_price - dividends - (spot_price * dilution_factor)

    # Calculate d1 and d2
    d1 = (np.log(adjusted_spot_price / strike_price) + (risk_free_rate + 0.5 * volatility ** 2) * time_to_expiration) / (volatility * np.sqrt(time_to_expiration))
    d2 = d1 - volatility * np.sqrt(time_to_expiration)
    
    # Calculate the price of the warrant
    warrant_price = (adjusted_spot_price * norm.cdf(d1) - strike_price * np.exp(-risk_free_rate * time_to_expiration) * norm.cdf(d2)) / leverage
    
    return warrant_price

# Example usage:
current_stock_price = 100.00  # Current stock price
exercise_price = 120.00  # Exercise price of the warrant
time_to_expiration = 1.0  # Time to expiration in years
risk_free_rate = 0.05  # Risk-free interest rate (5% per annum)
volatility = 0.25  # Volatility of the stock (25% per annum)
expected_dividends = 2.00  # Expected dividends
share_dilution_factor = 0.01  # Share dilution factor (1%)
leverage_factor = 5  # Leverage of 5 times

warrant_price = price_warrants(current_stock_price, exercise_price, time_to_expiration, risk_free_rate, volatility, expected_dividends, share_dilution_factor, leverage_factor)
print(f"The estimated price of the warrant is: {warrant_price}")

# pricing warrants using binomial trees

def price_warrants(spot_price, strike_price, time_to_expiration, risk_free_rate, volatility, dividends, dilution_factor, leverage):
    """
    Calculate the price of a warrant with time to expiration, dividends, dilution, and leverage.
    
    Parameters:
    spot_price (float): The current price of the stock.
    strike_price (float): The exercise price of the warrant.
    time_to_expiration (float): The time to expiration in years.
    risk_free_rate (float): The risk-free interest rate.
    volatility (float): The volatility of the stock.
    dividends (float): The expected dividends during the period until expiration.
    dilution_factor (float): The factor to account for share dilution.
    leverage (int): The leverage factor.

    Returns:
    float: The estimated price of the warrant.
    """
    # Black-Scholes Merton model adjusted for dividends and dilution
    from scipy.stats import norm
    import numpy as np

    # Adjust spot price for dividends and dilution
    adjusted_spot_price = spot_price - dividends - (spot_price * dilution_factor)

    # Calculate d1 and d2
    d1 = (np.log(adjusted_spot_price / strike_price) + (risk_free_rate + 0.5 * volatility ** 2) * time_to_expiration) / (volatility * np.sqrt(time_to_expiration))
    d2 = d1 - volatility * np.sqrt(time_to_expiration)
    
    # Calculate the price of the warrant
    warrant_price = (adjusted_spot_price * norm.cdf(d1) - strike_price * np.exp(-risk_free_rate * time_to_expiration) * norm.cdf(d2)) / leverage
    
    return warrant_price

# Example usage:
current_stock_price = 100.00  # Current stock price
exercise_price = 120.00  # Exercise price of the warrant
time_to_expiration = 1.0  # Time to expiration in years
risk_free_rate = 0.05  # Risk-free interest rate (5% per annum)
volatility = 0.25  # Volatility of the stock (25% per annum)
expected_dividends = 2.00  # Expected dividends
share_dilution_factor = 0.01  # Share dilution factor (1%)
leverage_factor = 5  # Leverage of 5 times

warrant_price = price_warrants(current_stock_price, exercise_price, time_to_expiration, risk_free_rate, volatility, expected_dividends, share_dilution_factor, leverage_factor)
print(f"The estimated price of the warrant is: {warrant_price}") 

# Risk neutral probabilities binomial tree pricing model

import numpy as np

def calculate_risk_neutral_probabilities(up_factor, down_factor, risk_free_rate, time_step):
    """
    Calculate risk-neutral probabilities for a binomial tree model.
    
    Parameters:
    up_factor (float): The factor by which the price goes up in each step.
    down_factor (float): The factor by which the price goes down in each step.
    risk_free_rate (float): The annual risk-free interest rate.
    time_step (float): The time step in years.

    Returns:
    float: The risk-neutral probability of an up move.
    float: The risk-neutral probability of a down move.
    """
    # Calculate the risk-free growth factor
    risk_free_growth = np.exp(risk_free_rate * time_step)
    
    # Calculate the risk-neutral probabilities
    p_up = (risk_free_growth - down_factor) / (up_factor - down_factor)
    p_down = 1 - p_up
    
    return p_up, p_down

# Example usage:
up_factor = 1.1  # The price goes up by 10%
down_factor = 0.9  # The price goes down by 10%
risk_free_rate = 0.05  # 5% annual risk-free interest rate
time_step = 1/12  # Monthly time step

p_up, p_down = calculate_risk_neutral_probabilities(up_factor, down_factor, risk_free_rate, time_step)
print(f"Risk-neutral probability of an up move: {p_up}")
print(f"Risk-neutral probability of a down move: {p_down}")

# stochastic equation for a standard Brownian motion 

import numpy as np

def generalized_wiener_process(mu, sigma, dt, steps):
    """
    Simulate a generalized Wiener process.
    
    Parameters:
    mu (float): Drift coefficient.
    sigma (float): Volatility coefficient.
    dt (float): Time increment.
    steps (int): Number of steps to simulate.

    Returns:
    np.array: Simulated values of the process.
    """
    # Initialize the array for the Wiener process
    W = np.zeros(steps+1)
    
    # Generate the increments of a standard Wiener process
    dW = np.random.normal(loc=0.0, scale=np.sqrt(dt), size=steps)
    
    # Calculate the generalized Wiener process
    W[1:] = np.cumsum(mu*dt + sigma*dW)
    
    return W

# Example usage:
mu = 0.05  # Drift coefficient
sigma = 0.2  # Volatility coefficient
dt = 0.01  # Time increment
steps = 1000  # Number of steps

# Generate the process
process = generalized_wiener_process(mu, sigma, dt, steps)

# Print the first 10 values
print(process[:10])

# Ito process

import numpy as np

def simulate_ito_process(mu, sigma, X0, T, dt):
    """
    Simulate an Ito process using the Euler-Maruyama method.
    
    Parameters:
    mu (function): The drift coefficient function, mu(t, X_t).
    sigma (function): The volatility coefficient function, sigma(t, X_t).
    X0 (float): The initial value of the process.
    T (float): The total time.
    dt (float): The time step.

    Returns:
    np.array: Simulated values of the Ito process.
    """
    N = int(T/dt)
    t = np.linspace(0, T, N)
    X = np.zeros(N)
    X[0] = X0
    
    for i in range(1, N):
        t_i = i * dt
        W_delta = np.random.normal(0, np.sqrt(dt))
        X[i] = X[i-1] + mu(t_i, X[i-1]) * dt + sigma(t_i, X[i-1]) * W_delta
    
    return t, X

# Example usage:
# Define the drift and volatility functions
def drift(t, X):
    return 0.1 * X  # Drift coefficient

def volatility(t, X):
    return 0.05 * X  # Volatility coefficient

# Initial value, total time, and time step
X0 = 1.0
T = 1.0
dt = 0.01

# Simulate the Ito process
t, X = simulate_ito_process(drift, volatility, X0, T, dt)

# Print the first 10 values
for i in range(10):
    print(f"t={t[i]:.2f}, X={X[i]:.5f}")

# ito lemma for function g(x,t)

import numpy as np

def ito_lemma(g, dg_dx, dg_dt, dg_d2x, x, t, mu, sigma, dt):
    """
    Apply Ito's Lemma to a function g(x, t).

    Parameters:
    g (function): The function g(x, t).
    dg_dx (function): The partial derivative of g with respect to x.
    dg_dt (function): The partial derivative of g with respect to t.
    dg_d2x (function): The second partial derivative of g with respect to x.
    x (float): The current value of the stochastic process.
    t (float): The current time.
    mu (float): The drift coefficient of the stochastic process.
    sigma (float): The volatility coefficient of the stochastic process.
    dt (float): The time increment.

    Returns:
    float: The change in g according to Ito's Lemma.
    """
    # Generate a random sample from the normal distribution for the Wiener process
    dW = np.random.normal(0, np.sqrt(dt))
    
    # Calculate the change in g according to Ito's Lemma
    dg = dg_dt(t, x) * dt + dg_dx(t, x) * (mu * dt + sigma * dW) + 0.5 * dg_d2x(t, x) * (sigma ** 2) * dt
    
    return dg

# Example usage:
# Define the function g(x, t) and its derivatives
def g(x, t):
    return x * np.exp(-t)

def dg_dx(t, x):
    return np.exp(-t)

def dg_dt(t, x):
    return -x * np.exp(-t)

def dg_d2x(t, x):
    return 0

# Current value of the stochastic process, time, drift, volatility, and time increment
x = 1.0
t = 0.0
mu = 0.1
sigma = 0.2
dt = 0.01

# Apply Ito's Lemma
change_in_g = ito_lemma(g, dg_dx, dg_dt, dg_d2x, x, t, mu, sigma, dt)
print(f"The change in g according to Ito's Lemma is: {change_in_g}")

# Ho-lee model for short rate

import numpy as np

def ho_lee_model(theta, sigma, r0, T, dt):
    """
    Simulate the short rate using the Ho-Lee model.

    Parameters:
    theta (function): A function of time t that returns the value of theta at t.
    sigma (float): The volatility of the short rate.
    r0 (float): The initial short rate.
    T (float): The total time horizon for the simulation.
    dt (float): The time step for the simulation.

    Returns:
    np.array: A numpy array containing the simulated short rate path.
    """
    num_steps = int(T / dt)
    rates = np.zeros(num_steps)
    rates[0] = r0
    
    for t in range(1, num_steps):
        t_i = t * dt
        dW = np.random.normal(0, np.sqrt(dt))
        rates[t] = rates[t-1] + theta(t_i) * dt + sigma * dW
    
    return rates

# Example usage:
# Define the theta function
def theta(t):
    # This is a placeholder for the actual theta function.
    # In practice, theta(t) would be calibrated from market data.
    return 0.01

# Model parameters
sigma = 0.02  # Volatility of the short rate
r0 = 0.05  # Initial short rate
T = 1.0  # Total time horizon (1 year)
dt = 1/252  # Daily time step

# Simulate the short rate
short_rate_path = ho_lee_model(theta, sigma, r0, T, dt)

# Print the first 10 simulated rates
print(short_rate_path[:10])

# hull-white model for short term rate 
import numpy as np

def hull_white_one_factor(alpha, sigma, theta, r0, T, dt):
    """
    Simulate the short rate using the Hull-White one-factor model.

    Parameters:
    alpha (float): The mean reversion speed.
    sigma (float): The volatility of the short rate.
    theta (function): A function that returns the time-dependent drift term.
    r0 (float): The initial short rate.
    T (float): The total time horizon for the simulation.
    dt (float): The time step for the simulation.

    Returns:
    np.array: A numpy array containing the simulated short rate path.
    """
    num_steps = int(T / dt)
    rates = np.zeros(num_steps)
    rates[0] = r0
    
    for t in range(1, num_steps):
        t_i = t * dt
        dW = np.random.normal(0, np.sqrt(dt))
        rates[t] = rates[t-1] + (theta(t_i) - alpha * rates[t-1]) * dt + sigma * dW
    
    return rates

# Example usage:
# Define the theta function
def theta(t):
    # This is a placeholder for the actual theta function.
    # In practice, theta(t) would be calibrated from market data.
    return 0.01

# Model parameters
alpha = 0.1  # Mean reversion speed
sigma = 0.01  # Volatility of the short rate
r0 = 0.05  # Initial short rate
T = 1.0  # Total time horizon (1 year)
dt = 1/252  # Daily time step

# Simulate the short rate
short_rate_path = hull_white_one_factor(alpha, sigma, theta, r0, T, dt)

# Print the first 10 simulated rates
print(short_rate_path[:10])

# hull white model of short term rates

import numpy as np

def hull_white_one_factor(alpha, sigma, theta, r0, T, dt):
    """
    Simulate the short rate using the Hull-White one-factor model.

    Parameters:
    alpha (float): The mean reversion speed.
    sigma (float): The volatility of the short rate.
    theta (function): A function that returns the time-dependent drift term.
    r0 (float): The initial short rate.
    T (float): The total time horizon for the simulation.
    dt (float): The time step for the simulation.

    Returns:
    np.array: A numpy array containing the simulated short rate path.
    """
    num_steps = int(T / dt)
    rates = np.zeros(num_steps)
    rates[0] = r0
    
    for t in range(1, num_steps):
        t_i = t * dt
        dW = np.random.normal(0, np.sqrt(dt))
        rates[t] = rates[t-1] + (theta(t_i) - alpha * rates[t-1]) * dt + sigma * dW
    
    return rates

# Example usage:
# Define the theta function
def theta(t):
    # This is a placeholder for the actual theta function.
    # In practice, theta(t) would be calibrated from market data.
    return 0.01

# Model parameters
alpha = 0.1  # Mean reversion speed
sigma = 0.01  # Volatility of the short rate
r0 = 0.05  # Initial short rate
T = 1.0  # Total time horizon (1 year)
dt = 1/252  # Daily time step

# Simulate the short rate
short_rate_path = hull_white_one_factor(alpha, sigma, theta, r0, T, dt)

# Print the first 10 simulated rates
print(short_rate_path[:10])

# vasicek model of short term rate

import numpy as np

def vasicek_model(r0, a, b, sigma, T, dt):
    """
    Simulate interest rate path over time using the Vasicek model.

    Parameters:
    r0 (float): The initial interest rate.
    a (float): The speed of reversion to the mean.
    b (float): The long-term mean level.
    sigma (float): The volatility of the interest rate.
    T (float): The total time horizon for the simulation.
    dt (float): The time step for the simulation.

    Returns:
    np.array: A numpy array containing the simulated interest rate path.
    """
    num_steps = int(T / dt)
    rates = np.zeros(num_steps)
    rates[0] = r0
    
    for t in range(1, num_steps):
        dr = a * (b - rates[t-1]) * dt + sigma * np.random.normal(0, np.sqrt(dt))
        rates[t] = rates[t-1] + dr
    
    return rates

# Example usage:
r0 = 0.05  # Initial interest rate
a = 0.1    # Speed of reversion
b = 0.05   # Long-term mean level
sigma = 0.01  # Volatility
T = 1.0    # Total time horizon (1 year)
dt = 1/252  # Daily time step

# Simulate the interest rate path
interest_rate_path = vasicek_model(r0, a, b, sigma, T, dt)

# Print the first 10 simulated rates
print(interest_rate_path[:10])

# Cox Ingersoll Ross model of short rate 


